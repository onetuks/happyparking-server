buildscript {
    ext {
        restdocsApiSpecVersion = '0.17.1'
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
}

group = 'com.onetuks'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = '0.8.11'
    reportsDirectory = layout.buildDirectory.dir('jacoco')
}

openapi3 {
    servers = [
            { url = "http://localhost:8080" },
            { url = "http://server:8080" }
//            { url = "https://서버url" }
    ]
    title = "Happy Parking"
    description = "해피파킹"
    version = "1"
    format = "json" // (json / yaml)
    outputDirectory = "src/main/resources/static"
    outputFileNamePrefix = "swagger"
}

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Netty/Resolver/DNS/Native/MacOS
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.90.Final:osx-aarch_64'

    // Docker Compose
//    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // PostgreSQL
    implementation 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // TestContainers
    testImplementation "org.testcontainers:testcontainers:1.19.3"
    testImplementation "org.testcontainers:junit-jupiter:1.19.3"
    testImplementation 'org.testcontainers:postgresql:1.19.3'
    testImplementation "org.testcontainers:jdbc:1.19.3"

    // Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Rest Docs API Spec
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"

    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation "org.springframework.security:spring-security-test"

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Spring cache
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: '3.2.0'

    // Caffeine
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.1.8'

    // Spring Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy('jacocoTestReport')
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

def excludes_regex = [
        '**/Q*',
        '**/global/**',
        '**/*Application*',
        "**/auth/**"
]

tasks.named('jacocoTestReport') {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }

    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, excludes: excludes_regex)
            }))

    finalizedBy('jacocoTestCoverageVerification')
}

tasks.named('jacocoTestCoverageVerification') {
    dependsOn test

    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, excludes: excludes_regex)
            }))

    violationRules {
        rule {
            enabled = true;
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }

            limit {
                counter = 'COMPLEXITY'
                minimum = 0.5
            }
        }
    }
}
